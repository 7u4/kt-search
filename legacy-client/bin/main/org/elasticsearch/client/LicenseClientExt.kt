// Generated by EsKotlinCodeGenPlugin.
//
// Do not modify. This code is regenerated regularly. 
package org.elasticsearch.client

import com.jillesvangurp.eskotlinwrapper.SuspendingActionListener.Companion.suspending
import org.elasticsearch.action.support.master.AcknowledgedResponse
import org.elasticsearch.client.license.DeleteLicenseRequest
import org.elasticsearch.client.license.GetLicenseRequest
import org.elasticsearch.client.license.GetLicenseResponse
import org.elasticsearch.client.license.PutLicenseRequest
import org.elasticsearch.client.license.PutLicenseResponse
import org.elasticsearch.client.license.StartBasicRequest
import org.elasticsearch.client.license.StartBasicResponse
import org.elasticsearch.client.license.StartTrialRequest
import org.elasticsearch.client.license.StartTrialResponse

public suspend fun LicenseClient.deleteLicenseAsync(request: DeleteLicenseRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.deleteLicenseAsync(request,requestOptions,it)
  }
}

public suspend fun LicenseClient.startTrialAsync(request: StartTrialRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): StartTrialResponse {
  // generated code block
  return suspending {
      this.startTrialAsync(request,requestOptions,it)
  }
}

public suspend fun LicenseClient.putLicenseAsync(request: PutLicenseRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): PutLicenseResponse {
  // generated code block
  return suspending {
      this.putLicenseAsync(request,requestOptions,it)
  }
}

public suspend fun LicenseClient.getLicenseAsync(request: GetLicenseRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): GetLicenseResponse {
  // generated code block
  return suspending {
      this.getLicenseAsync(request,requestOptions,it)
  }
}

public suspend fun LicenseClient.startBasicAsync(request: StartBasicRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): StartBasicResponse {
  // generated code block
  return suspending {
      this.startBasicAsync(request,requestOptions,it)
  }
}
