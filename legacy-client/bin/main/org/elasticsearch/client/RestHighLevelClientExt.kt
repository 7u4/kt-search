// Generated by EsKotlinCodeGenPlugin.
//
// Do not modify. This code is regenerated regularly. 
package org.elasticsearch.client

import com.jillesvangurp.eskotlinwrapper.SuspendingActionListener.Companion.suspending
import org.elasticsearch.action.`get`.GetRequest
import org.elasticsearch.action.`get`.GetResponse
import org.elasticsearch.action.`get`.MultiGetRequest
import org.elasticsearch.action.`get`.MultiGetResponse
import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksResponse
import org.elasticsearch.action.admin.cluster.storedscripts.DeleteStoredScriptRequest
import org.elasticsearch.action.admin.cluster.storedscripts.GetStoredScriptRequest
import org.elasticsearch.action.admin.cluster.storedscripts.GetStoredScriptResponse
import org.elasticsearch.action.admin.cluster.storedscripts.PutStoredScriptRequest
import org.elasticsearch.action.bulk.BulkRequest
import org.elasticsearch.action.bulk.BulkResponse
import org.elasticsearch.action.delete.DeleteRequest
import org.elasticsearch.action.delete.DeleteResponse
import org.elasticsearch.action.explain.ExplainRequest
import org.elasticsearch.action.explain.ExplainResponse
import org.elasticsearch.action.fieldcaps.FieldCapabilitiesRequest
import org.elasticsearch.action.fieldcaps.FieldCapabilitiesResponse
import org.elasticsearch.action.index.IndexRequest
import org.elasticsearch.action.index.IndexResponse
import org.elasticsearch.action.search.ClearScrollRequest
import org.elasticsearch.action.search.ClearScrollResponse
import org.elasticsearch.action.search.ClosePointInTimeRequest
import org.elasticsearch.action.search.ClosePointInTimeResponse
import org.elasticsearch.action.search.MultiSearchRequest
import org.elasticsearch.action.search.MultiSearchResponse
import org.elasticsearch.action.search.OpenPointInTimeRequest
import org.elasticsearch.action.search.OpenPointInTimeResponse
import org.elasticsearch.action.search.SearchRequest
import org.elasticsearch.action.search.SearchResponse
import org.elasticsearch.action.search.SearchScrollRequest
import org.elasticsearch.action.support.master.AcknowledgedResponse
import org.elasticsearch.action.update.UpdateRequest
import org.elasticsearch.action.update.UpdateResponse
import org.elasticsearch.client.core.CountRequest
import org.elasticsearch.client.core.CountResponse
import org.elasticsearch.client.core.GetSourceRequest
import org.elasticsearch.client.core.GetSourceResponse
import org.elasticsearch.client.core.MultiTermVectorsRequest
import org.elasticsearch.client.core.MultiTermVectorsResponse
import org.elasticsearch.client.core.TermVectorsRequest
import org.elasticsearch.client.core.TermVectorsResponse
import org.elasticsearch.index.rankeval.RankEvalRequest
import org.elasticsearch.index.rankeval.RankEvalResponse
import org.elasticsearch.index.reindex.BulkByScrollResponse
import org.elasticsearch.index.reindex.DeleteByQueryRequest
import org.elasticsearch.index.reindex.ReindexRequest
import org.elasticsearch.index.reindex.UpdateByQueryRequest
import org.elasticsearch.script.mustache.MultiSearchTemplateRequest
import org.elasticsearch.script.mustache.MultiSearchTemplateResponse
import org.elasticsearch.script.mustache.SearchTemplateRequest
import org.elasticsearch.script.mustache.SearchTemplateResponse

public suspend fun RestHighLevelClient.bulkAsync(request: BulkRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): BulkResponse {
  // generated code block
  return suspending {
      this.bulkAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.reindexAsync(request: ReindexRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): BulkByScrollResponse {
  // generated code block
  return suspending {
      this.reindexAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.updateByQueryAsync(request: UpdateByQueryRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): BulkByScrollResponse {
  // generated code block
  return suspending {
      this.updateByQueryAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.deleteByQueryAsync(request: DeleteByQueryRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): BulkByScrollResponse {
  // generated code block
  return suspending {
      this.deleteByQueryAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.deleteByQueryRethrottleAsync(request: RethrottleRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): ListTasksResponse {
  // generated code block
  return suspending {
      this.deleteByQueryRethrottleAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.updateByQueryRethrottleAsync(request: RethrottleRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): ListTasksResponse {
  // generated code block
  return suspending {
      this.updateByQueryRethrottleAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.reindexRethrottleAsync(request: RethrottleRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): ListTasksResponse {
  // generated code block
  return suspending {
      this.reindexRethrottleAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.getAsync(request: GetRequest, requestOptions: RequestOptions
    = RequestOptions.DEFAULT): GetResponse {
  // generated code block
  return suspending {
      this.getAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.mgetAsync(request: MultiGetRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): MultiGetResponse {
  // generated code block
  return suspending {
      this.mgetAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.getSourceAsync(request: GetSourceRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): GetSourceResponse {
  // generated code block
  return suspending {
      this.getSourceAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.indexAsync(request: IndexRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): IndexResponse {
  // generated code block
  return suspending {
      this.indexAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.countAsync(request: CountRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): CountResponse {
  // generated code block
  return suspending {
      this.countAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.updateAsync(request: UpdateRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): UpdateResponse {
  // generated code block
  return suspending {
      this.updateAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.deleteAsync(request: DeleteRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): DeleteResponse {
  // generated code block
  return suspending {
      this.deleteAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.searchAsync(request: SearchRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): SearchResponse {
  // generated code block
  return suspending {
      this.searchAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.msearchAsync(request: MultiSearchRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): MultiSearchResponse {
  // generated code block
  return suspending {
      this.msearchAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.scrollAsync(request: SearchScrollRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): SearchResponse {
  // generated code block
  return suspending {
      this.scrollAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.clearScrollAsync(request: ClearScrollRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): ClearScrollResponse {
  // generated code block
  return suspending {
      this.clearScrollAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.openPointInTimeAsync(request: OpenPointInTimeRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): OpenPointInTimeResponse {
  // generated code block
  return suspending {
      this.openPointInTimeAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.closePointInTimeAsync(request: ClosePointInTimeRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): ClosePointInTimeResponse {
  // generated code block
  return suspending {
      this.closePointInTimeAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.searchTemplateAsync(request: SearchTemplateRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): SearchTemplateResponse {
  // generated code block
  return suspending {
      this.searchTemplateAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.explainAsync(request: ExplainRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): ExplainResponse {
  // generated code block
  return suspending {
      this.explainAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.termvectorsAsync(request: TermVectorsRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): TermVectorsResponse {
  // generated code block
  return suspending {
      this.termvectorsAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.mtermvectorsAsync(request: MultiTermVectorsRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): MultiTermVectorsResponse {
  // generated code block
  return suspending {
      this.mtermvectorsAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.msearchTemplateAsync(request: MultiSearchTemplateRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): MultiSearchTemplateResponse {
  // generated code block
  return suspending {
      this.msearchTemplateAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.rankEvalAsync(request: RankEvalRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): RankEvalResponse {
  // generated code block
  return suspending {
      this.rankEvalAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.getScriptAsync(request: GetStoredScriptRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): GetStoredScriptResponse {
  // generated code block
  return suspending {
      this.getScriptAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.deleteScriptAsync(request: DeleteStoredScriptRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.deleteScriptAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.putScriptAsync(request: PutStoredScriptRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.putScriptAsync(request,requestOptions,it)
  }
}

public suspend fun RestHighLevelClient.fieldCapsAsync(request: FieldCapabilitiesRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): FieldCapabilitiesResponse {
  // generated code block
  return suspending {
      this.fieldCapsAsync(request,requestOptions,it)
  }
}
