// Generated by EsKotlinCodeGenPlugin.
//
// Do not modify. This code is regenerated regularly. 
package org.elasticsearch.client

import com.jillesvangurp.eskotlinwrapper.SuspendingActionListener.Companion.suspending
import org.elasticsearch.action.support.master.AcknowledgedResponse
import org.elasticsearch.client.watcher.AckWatchRequest
import org.elasticsearch.client.watcher.AckWatchResponse
import org.elasticsearch.client.watcher.ActivateWatchRequest
import org.elasticsearch.client.watcher.ActivateWatchResponse
import org.elasticsearch.client.watcher.DeactivateWatchRequest
import org.elasticsearch.client.watcher.DeactivateWatchResponse
import org.elasticsearch.client.watcher.DeleteWatchRequest
import org.elasticsearch.client.watcher.DeleteWatchResponse
import org.elasticsearch.client.watcher.ExecuteWatchRequest
import org.elasticsearch.client.watcher.ExecuteWatchResponse
import org.elasticsearch.client.watcher.GetWatchRequest
import org.elasticsearch.client.watcher.GetWatchResponse
import org.elasticsearch.client.watcher.PutWatchRequest
import org.elasticsearch.client.watcher.PutWatchResponse
import org.elasticsearch.client.watcher.StartWatchServiceRequest
import org.elasticsearch.client.watcher.StopWatchServiceRequest
import org.elasticsearch.client.watcher.WatcherStatsRequest
import org.elasticsearch.client.watcher.WatcherStatsResponse

public suspend fun WatcherClient.startWatchServiceAsync(request: StartWatchServiceRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.startWatchServiceAsync(request,requestOptions,it)
  }
}

public suspend fun WatcherClient.stopWatchServiceAsync(request: StopWatchServiceRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.stopWatchServiceAsync(request,requestOptions,it)
  }
}

public suspend fun WatcherClient.putWatchAsync(request: PutWatchRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): PutWatchResponse {
  // generated code block
  return suspending {
      this.putWatchAsync(request,requestOptions,it)
  }
}

public suspend fun WatcherClient.getWatchAsync(request: GetWatchRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): GetWatchResponse {
  // generated code block
  return suspending {
      this.getWatchAsync(request,requestOptions,it)
  }
}

public suspend fun WatcherClient.deactivateWatchAsync(request: DeactivateWatchRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): DeactivateWatchResponse {
  // generated code block
  return suspending {
      this.deactivateWatchAsync(request,requestOptions,it)
  }
}

public suspend fun WatcherClient.deleteWatchAsync(request: DeleteWatchRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): DeleteWatchResponse {
  // generated code block
  return suspending {
      this.deleteWatchAsync(request,requestOptions,it)
  }
}

public suspend fun WatcherClient.ackWatchAsync(request: AckWatchRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AckWatchResponse {
  // generated code block
  return suspending {
      this.ackWatchAsync(request,requestOptions,it)
  }
}

public suspend fun WatcherClient.activateWatchAsync(request: ActivateWatchRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): ActivateWatchResponse {
  // generated code block
  return suspending {
      this.activateWatchAsync(request,requestOptions,it)
  }
}

public suspend fun WatcherClient.executeWatchAsync(request: ExecuteWatchRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): ExecuteWatchResponse {
  // generated code block
  return suspending {
      this.executeWatchAsync(request,requestOptions,it)
  }
}

public suspend fun WatcherClient.watcherStatsAsync(request: WatcherStatsRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): WatcherStatsResponse {
  // generated code block
  return suspending {
      this.watcherStatsAsync(request,requestOptions,it)
  }
}
