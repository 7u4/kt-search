// Generated by EsKotlinCodeGenPlugin.
//
// Do not modify. This code is regenerated regularly. 
package org.elasticsearch.client

import com.jillesvangurp.eskotlinwrapper.SuspendingActionListener.Companion.suspending
import org.elasticsearch.client.ccr.CcrStatsRequest
import org.elasticsearch.client.ccr.CcrStatsResponse
import org.elasticsearch.client.ccr.DeleteAutoFollowPatternRequest
import org.elasticsearch.client.ccr.FollowInfoRequest
import org.elasticsearch.client.ccr.FollowInfoResponse
import org.elasticsearch.client.ccr.FollowStatsRequest
import org.elasticsearch.client.ccr.FollowStatsResponse
import org.elasticsearch.client.ccr.ForgetFollowerRequest
import org.elasticsearch.client.ccr.GetAutoFollowPatternRequest
import org.elasticsearch.client.ccr.GetAutoFollowPatternResponse
import org.elasticsearch.client.ccr.PauseAutoFollowPatternRequest
import org.elasticsearch.client.ccr.PauseFollowRequest
import org.elasticsearch.client.ccr.PutAutoFollowPatternRequest
import org.elasticsearch.client.ccr.PutFollowRequest
import org.elasticsearch.client.ccr.PutFollowResponse
import org.elasticsearch.client.ccr.ResumeAutoFollowPatternRequest
import org.elasticsearch.client.ccr.ResumeFollowRequest
import org.elasticsearch.client.ccr.UnfollowRequest
import org.elasticsearch.client.core.AcknowledgedResponse
import org.elasticsearch.client.core.BroadcastResponse

public suspend fun CcrClient.getFollowInfoAsync(request: FollowInfoRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): FollowInfoResponse {
  // generated code block
  return suspending {
      this.getFollowInfoAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.putFollowAsync(request: PutFollowRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): PutFollowResponse {
  // generated code block
  return suspending {
      this.putFollowAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.pauseFollowAsync(request: PauseFollowRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.pauseFollowAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.resumeFollowAsync(request: ResumeFollowRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.resumeFollowAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.unfollowAsync(request: UnfollowRequest, requestOptions: RequestOptions
    = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.unfollowAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.forgetFollowerAsync(request: ForgetFollowerRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): BroadcastResponse {
  // generated code block
  return suspending {
      this.forgetFollowerAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.putAutoFollowPatternAsync(request: PutAutoFollowPatternRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.putAutoFollowPatternAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.deleteAutoFollowPatternAsync(request: DeleteAutoFollowPatternRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.deleteAutoFollowPatternAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.getAutoFollowPatternAsync(request: GetAutoFollowPatternRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): GetAutoFollowPatternResponse {
  // generated code block
  return suspending {
      this.getAutoFollowPatternAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.pauseAutoFollowPatternAsync(request: PauseAutoFollowPatternRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.pauseAutoFollowPatternAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.resumeAutoFollowPatternAsync(request: ResumeAutoFollowPatternRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.resumeAutoFollowPatternAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.getCcrStatsAsync(request: CcrStatsRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): CcrStatsResponse {
  // generated code block
  return suspending {
      this.getCcrStatsAsync(request,requestOptions,it)
  }
}

public suspend fun CcrClient.getFollowStatsAsync(request: FollowStatsRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): FollowStatsResponse {
  // generated code block
  return suspending {
      this.getFollowStatsAsync(request,requestOptions,it)
  }
}
