// Generated by EsKotlinCodeGenPlugin.
//
// Do not modify. This code is regenerated regularly. 
package org.elasticsearch.client

import com.jillesvangurp.eskotlinwrapper.SuspendingActionListener.Companion.suspending
import org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest
import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse
import org.elasticsearch.action.admin.cluster.settings.ClusterGetSettingsRequest
import org.elasticsearch.action.admin.cluster.settings.ClusterGetSettingsResponse
import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest
import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsResponse
import org.elasticsearch.action.support.master.AcknowledgedResponse
import org.elasticsearch.client.cluster.RemoteInfoRequest
import org.elasticsearch.client.cluster.RemoteInfoResponse
import org.elasticsearch.client.indices.DeleteComponentTemplateRequest
import org.elasticsearch.client.indices.GetComponentTemplatesRequest
import org.elasticsearch.client.indices.GetComponentTemplatesResponse
import org.elasticsearch.client.indices.PutComponentTemplateRequest

public suspend fun ClusterClient.putSettingsAsync(request: ClusterUpdateSettingsRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): ClusterUpdateSettingsResponse {
  // generated code block
  return suspending {
      this.putSettingsAsync(request,requestOptions,it)
  }
}

public suspend fun ClusterClient.getSettingsAsync(request: ClusterGetSettingsRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): ClusterGetSettingsResponse {
  // generated code block
  return suspending {
      this.getSettingsAsync(request,requestOptions,it)
  }
}

public suspend fun ClusterClient.healthAsync(request: ClusterHealthRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): ClusterHealthResponse {
  // generated code block
  return suspending {
      this.healthAsync(request,requestOptions,it)
  }
}

public suspend fun ClusterClient.remoteInfoAsync(request: RemoteInfoRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): RemoteInfoResponse {
  // generated code block
  return suspending {
      this.remoteInfoAsync(request,requestOptions,it)
  }
}

public suspend
    fun ClusterClient.deleteComponentTemplateAsync(request: DeleteComponentTemplateRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.deleteComponentTemplateAsync(request,requestOptions,it)
  }
}

public suspend fun ClusterClient.putComponentTemplateAsync(request: PutComponentTemplateRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.putComponentTemplateAsync(request,requestOptions,it)
  }
}

public suspend fun ClusterClient.getComponentTemplateAsync(request: GetComponentTemplatesRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): GetComponentTemplatesResponse {
  // generated code block
  return suspending {
      this.getComponentTemplateAsync(request,requestOptions,it)
  }
}
