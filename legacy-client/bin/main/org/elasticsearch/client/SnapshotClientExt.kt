// Generated by EsKotlinCodeGenPlugin.
//
// Do not modify. This code is regenerated regularly. 
package org.elasticsearch.client

import com.jillesvangurp.eskotlinwrapper.SuspendingActionListener.Companion.suspending
import org.elasticsearch.action.admin.cluster.repositories.`get`.GetRepositoriesRequest
import org.elasticsearch.action.admin.cluster.repositories.`get`.GetRepositoriesResponse
import org.elasticsearch.action.admin.cluster.repositories.cleanup.CleanupRepositoryRequest
import org.elasticsearch.action.admin.cluster.repositories.cleanup.CleanupRepositoryResponse
import org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryRequest
import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest
import org.elasticsearch.action.admin.cluster.repositories.verify.VerifyRepositoryRequest
import org.elasticsearch.action.admin.cluster.repositories.verify.VerifyRepositoryResponse
import org.elasticsearch.action.admin.cluster.snapshots.`get`.GetSnapshotsRequest
import org.elasticsearch.action.admin.cluster.snapshots.`get`.GetSnapshotsResponse
import org.elasticsearch.action.admin.cluster.snapshots.clone.CloneSnapshotRequest
import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest
import org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotResponse
import org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest
import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest
import org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotResponse
import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest
import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse
import org.elasticsearch.action.support.master.AcknowledgedResponse

public suspend fun SnapshotClient.getRepositoryAsync(request: GetRepositoriesRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): GetRepositoriesResponse {
  // generated code block
  return suspending {
      this.getRepositoryAsync(request,requestOptions,it)
  }
}

public suspend fun SnapshotClient.createRepositoryAsync(request: PutRepositoryRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.createRepositoryAsync(request,requestOptions,it)
  }
}

public suspend fun SnapshotClient.deleteRepositoryAsync(request: DeleteRepositoryRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.deleteRepositoryAsync(request,requestOptions,it)
  }
}

public suspend fun SnapshotClient.verifyRepositoryAsync(request: VerifyRepositoryRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): VerifyRepositoryResponse {
  // generated code block
  return suspending {
      this.verifyRepositoryAsync(request,requestOptions,it)
  }
}

public suspend fun SnapshotClient.cleanupRepositoryAsync(request: CleanupRepositoryRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): CleanupRepositoryResponse {
  // generated code block
  return suspending {
      this.cleanupRepositoryAsync(request,requestOptions,it)
  }
}

public suspend fun SnapshotClient.createAsync(request: CreateSnapshotRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): CreateSnapshotResponse {
  // generated code block
  return suspending {
      this.createAsync(request,requestOptions,it)
  }
}

public suspend fun SnapshotClient.cloneAsync(request: CloneSnapshotRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.cloneAsync(request,requestOptions,it)
  }
}

public suspend fun SnapshotClient.statusAsync(request: SnapshotsStatusRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): SnapshotsStatusResponse {
  // generated code block
  return suspending {
      this.statusAsync(request,requestOptions,it)
  }
}

public suspend fun SnapshotClient.restoreAsync(request: RestoreSnapshotRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): RestoreSnapshotResponse {
  // generated code block
  return suspending {
      this.restoreAsync(request,requestOptions,it)
  }
}

public suspend fun SnapshotClient.getAsync(request: GetSnapshotsRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): GetSnapshotsResponse {
  // generated code block
  return suspending {
      this.getAsync(request,requestOptions,it)
  }
}

public suspend fun SnapshotClient.deleteAsync(request: DeleteSnapshotRequest,
    requestOptions: RequestOptions = RequestOptions.DEFAULT): AcknowledgedResponse {
  // generated code block
  return suspending {
      this.deleteAsync(request,requestOptions,it)
  }
}
