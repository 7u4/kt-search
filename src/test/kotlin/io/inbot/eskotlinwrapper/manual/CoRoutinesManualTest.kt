package io.inbot.eskotlinwrapper.manual

import io.inbot.eskotlinwrapper.AbstractElasticSearchTest
import io.inbot.eskotlinwrapper.IndexDAO
import kotlinx.coroutines.async
import kotlinx.coroutines.runBlocking
import org.elasticsearch.action.ActionListener
import org.elasticsearch.action.search.source
import org.elasticsearch.action.support.WriteRequest
import org.elasticsearch.client.RequestOptions
import org.elasticsearch.client.crudDao
import org.elasticsearch.client.indices.ReloadAnalyzersRequest
import org.elasticsearch.client.indices.ReloadAnalyzersResponse
import org.elasticsearch.client.reloadAnalyzersAsync
import org.elasticsearch.common.xcontent.XContentType
import org.elasticsearch.index.query.QueryBuilders
import org.junit.jupiter.api.Test

class CoRoutinesManualTest: AbstractElasticSearchTest(indexPrefix = "manual") {
    private data class Thing(val title: String)

    @Test
    fun `coroutines manual`() {
        // we have to do this twice once for printing and once for using :-)
        val thingDao = esClient.crudDao<Thing>("things", refreshAllowed = true)
        // make sure we get rid of the things index before running the rest of this
        thingDao.deleteIndex()
        thingDao.createIndex {
            source(
                """
                            {
                              "settings": {
                                "index": {
                                  "number_of_shards": 3,
                                  "number_of_replicas": 0,
                                  "blocks": {
                                    "read_only_allow_delete": "false"
                                  }
                                }
                              },
                              "mappings": {
                                "properties": {
                                  "title": {
                                    "type": "text"
                                  }
                                }
                              }
                            }
                        """, XContentType.JSON)
        }
        KotlinForExample.markdownPageWithNavigation(coroutinesPage) {
            +"""
                The RestHighLevelClient exposes asynchronous versions of most APIs that take a call back to process
                the response when it comes back. Using this is kind of boiler plate heavy. 
                
                Luckily, Kotlin has co-routines for asynchronous programming and this library provides co-routine 
                friendly versions of these functions. These `suspend` functions work pretty much the same way as their 
                synchronous version except they are marked as suspend and use a `SuspendingActionListener` that uses
                Kotlin's `suspendCancellableCoroutine` to wrap the callback that the rest high level client expects.
                
                As of Elasticsearch 7.5.0, all asynchronous calls return a `Cancellable` object that allows you to cancel
                the task. Using `suspendCancellableCoRoutine` uses this and this means that if you have some failure
                or abort a coroutine scope, all the running tasks are cancelled. 
                
                If you use an asynchronous server framework such as Ktor or Spring Boot 2.x (in reactive mode), you'll
                want to use the asynchronous functions.

                To support co-routines, this project is using a 
                [code generation plugin](https://github.com/jillesvangurp/es-kotlin-codegen-plugin) 
                to generate the co-routine friendly versions of each of the
                Rest High Level async functions. At this point most of them are covered. There are more than a hundred 
                of these. 
                
                As an example, here are three ways to use the reloadAnalyzers API:
            """

            block(false) {
                // the synchronous version as provided by the RestHighLevel client
                val ic = esClient.indices()
                val response = ic.reloadAnalyzers(
                    ReloadAnalyzersRequest("myindex"), RequestOptions.DEFAULT)

                // the asynchronous version with a callback as provided by the
                // RestHighLevel client
                ic.reloadAnalyzersAsync(ReloadAnalyzersRequest("myindex"),
                    RequestOptions.DEFAULT, object : ActionListener<ReloadAnalyzersResponse> {
                    override fun onFailure(e: Exception) {
                        println("it failed")
                    }

                    override fun onResponse(response: ReloadAnalyzersResponse) {
                        println("it worked")
                    }
                })

                runBlocking {
                    // the coroutine friendly version using a function generated by the
                    // code generator plugin this is a suspend version so we put it in
                    // a runBlocking to get a coroutine scope use a more appropriate
                    // scope in your own application of course.
                    val response = ic.reloadAnalyzersAsync(
                        ReloadAnalyzersRequest("myindex"), RequestOptions.DEFAULT)
                }
            }

            +"""
                This works the same for all the async functions in the Java client. 
                
                ## IndexDAO Async
                
                Of course, ${mdLink(IndexDAO::class)} has async functions as well and using that works 
                exactly the same as the synchronous version.
            """

            blockWithOutput {
                runBlocking {
                    // simply use async versions the same way as you would use the
                    // regular versions and it will suspend at the appropriate moments
                    thingDao.bulkAsync(refreshPolicy = WriteRequest.RefreshPolicy.IMMEDIATE) {
                        1.rangeTo(50).forEach {
                            index("$it",Thing("document $it"))
                        }
                    }

                    println("We indexed  ${thingDao.countAsync()} things asynchronously")
                }
            }

            +"""
                Another useful application might be doing several searches asynchronously and then combining their results.
            """

            blockWithOutput {
                runBlocking {
                    // asynchronously do a few searches

                    val combinedTotals = 0.until(5).map {
                        async {
                            thingDao.searchAsync {
                                source {
                                    from(it*5)
                                    size(5)
                                    val q = QueryBuilders.matchPhrasePrefixQuery("title", "docu")
                                    query(q)
                                }
                            }
                        }
                    }.map {
                        // get each result and extract the number of hits
                        it.await().mappedHits.count()
                    }.reduce { l, r->l+r}

                    println("We fetched $combinedTotals Things")
                }
            }

            +"""
                ## Development status
                
                Co-routine support is still somewhat experimental in this library and there may be more changes
                related to this in future versions as our code generator evolves. E.g. `Flow` seems like it 
                could be useful when dealing with (scrolling) searches. Another topic of attention is using multiple
                threads for asynchronous bulk indexing to improve throughput.
                
                However, the generated async functions should be stable to use as is and are useful right now.
            """
        }
    }
}